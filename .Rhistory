find.packages("devtools")
find.package("devtools")
install.packages("devtools")
find_rtools()
library("devtools", lib.loc="~/R/win-library/3.1")
find_rtools()
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.1.0/library")
q()
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<- .na(my_data)
my_na<- my_data.na()
my_na<- is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect<-c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
matrix(data=1:20, nrow=4, ncol=5)
my_matrix2<-matrix(data=1:20, nrow=4, ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data)<-cnames
my_data
q
q()
library(datasets)
data(iris)
?iris
iris
sepal<-iris[,1]
sepal
Sppec<-iris[,5]
sppec
Sppec
sepbo<- Sppec=="virginica"
sepbo
sepbov<-sepal[sepbo]
mean(sepbov)
slm<-mean(iris[,1])
slm
slw<-mean(iris[,2])
plm<-mean(iris[,3])
pwm<-mean(iris[,4])
swl<-mean(iris[,2])
slm
swm
swm<-mean(iris[,2])
slm
swm
plm
pwm
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
slm
swm
plm
pwm
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
with(mtcars, tapply(hp, cyl, mean))
hpw<-with(mtcars, tapply(hp, cyl, mean))
hpw[1]
dif<-hpw[3]-hpw[1]
dif
debug(ls)
ls
1
2
debug(ls)
ls
ls()
q
quit
exit
set.seed(1)
rpois(5, 2)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
y<-1
x1<-2
x2<-0
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
$by.total
set.seed(1)
rpois(5, 2)
}
x<<-e
x<<-3
x
e<-c(a=1,b=2)
e
i<-1
local({
e <- c(A=10,B=11)
i <-2
e[i] <<- e[i]+1
print(e)
}
)
print(e)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
list(set = set, get = get,
+      setmean = setmean,
+      getmean = getmean)
list(set = set, get = get,
+      setmean = setmean,
+      getmean = getmean)
list(set = set, get = get, setmean = setmean,getmean = getmean)
x<-c(1:20)
x
makeVector(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x)
setmean()
mean<-2
setmean(mean)
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
$get
$get()
get <- function() { x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
setwd("D:/cursos/Programación en R (7 jul)/Setmana 2/Examen")
source("matrius.R")
setwd("D:/cursos/Programación en R (7 jul)/Setmana 2/Examen")
source("matrius.R")
t
list t
print(t)
t()
t$set()
t$set(c(1,2))
source("matrius.R")
setwd("D:/cursos/Programación en R (7 jul)/Setmana 2/Examen")
x<-c(1:20)
t
m
class(t)
t$get()
x$get()
m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x$get()
x$getmean()
makeVector(y)
m
y$getmean()
y
y<-(1:20)
makeVector(y)
y$getmean()
x$getmean()
x$getmean(y)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(x)
t<-makeVector(x)
t$getmean(1:20)
t$getmean(c(1:20))
t$getmean()
x<-(1:20)
t<-makeVector(x)
t$getmean()
t$getmean(x)
cachemean(t)
m
cachemean(t)
x<-(1:30)
cachemean(t)
t<-makeVector(x)
cachemean(t)
t<-makeVector(c(1:20))
cachemean(t)
t<-makeVector(c(1:30))
cachemean(t)
t$get()
t$set(c(1:40))
t$get()
cachemean(t)
cachemean(t)
makeMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheInverse <- function(x) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmean(m)
m
}
C<-c(5,3,1,7)
C<-matrix(C,2,2)
t<-makeMatrix(C)
cacheInverse(t)
t$get()
t$getinverse()
solve(t$get())
cacheInverse(t)
data<-t$get()
data
m<-solve(data)
m
cacheInverse(t)
x$setinverse(m)
m
makeMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheInverse <- function(x) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
C<-c(5,3,1,7)
C<-matrix(C,2,2)
c
C
t<-makeMatrix(C)
cacheInverse(t)
cacheInverse(t)
D=(1.0, 4, 9, 0.5, 5, 7, 2.0, 6, 11)
D=c(1.0, 4, 9, 0.5, 5, 7, 2.0, 6, 11)
y<-makeMatrix(D)
cacheInverse(y)
D<-matrix(D,3,3)
y<-makeMatrix(D)
cacheInverse(y)
cacheInverse(y)
setwd("C:/Users/angel/ProgrammingAssignment2")
